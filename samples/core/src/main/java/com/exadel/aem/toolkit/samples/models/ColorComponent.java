package com.exadel.aem.toolkit.samples.models;

import com.exadel.aem.toolkit.api.annotations.main.AemComponent;
import com.exadel.aem.toolkit.api.annotations.main.Dialog;
import com.exadel.aem.toolkit.api.annotations.widgets.DialogField;
import com.exadel.aem.toolkit.api.annotations.widgets.Heading;
import com.exadel.aem.toolkit.api.annotations.widgets.attribute.Attribute;
import com.exadel.aem.toolkit.api.annotations.widgets.color.ColorField;
import com.exadel.aem.toolkit.api.annotations.widgets.color.ColorVariant;
import com.exadel.aem.toolkit.api.annotations.widgets.color.GenerateColorsState;
import com.exadel.aem.toolkit.samples.constants.GroupConstants;
import com.exadel.aem.toolkit.samples.constants.PathConstants;

import org.apache.sling.api.resource.Resource;
import org.apache.sling.models.annotations.Default;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;

@AemComponent(
    path = "content/color-component",
    title = "Color Component",
    description = "This component shows possibilities of interaction with colors",
    resourceSuperType = PathConstants.FOUNDATION_PARBASE_PATH,
    componentGroup = GroupConstants.COMPONENT_GROUP
)
@Dialog(extraClientlibs = "etoolbox-authoring-kit.samples.authoring")
@Model(adaptables = Resource.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)

public class ColorComponent {
    private static final String DEFAULT_COLOR = "#A9A9A9";
    @Heading(value = "@ColorField(values)", level = 4)
    String defaultHeading;
    @DialogField
    @ColorField
    @Default(values = DEFAULT_COLOR)
    @ValueMapValue
    private String defaultSlingColorFiled;

    @Heading(value = "@ColorField(values,emptyText)", level = 4)
    String emptyTextHeading;
    @DialogField
    @ColorField(
        value = DEFAULT_COLOR,
        emptyText = "Choose color"

    )
    @ValueMapValue
    private String defaultAKColorFiled;
    @Heading(value = "@ColorField(values, variant=ColorVariant.SWATCH)", level = 4)
    String swatchHeading;
    /**
     * @Attribute annotation was applied to edit color field position in the dialog window for ColorVariant.SWATCH option.
     * After field initialization CSS settings can be edited in color-component/color-component.css file
     */
    @DialogField(
        name = "qwerty",
        label = "ColorVariant.SWATCH"
    )
    @Attribute(id = "swatchSquare")
    @ColorField(
        value = DEFAULT_COLOR,
        emptyText = "Choose color",
        variant = ColorVariant.SWATCH
    )
    @ValueMapValue(name = "qwerty")
    private String colorVariantSWATCH;

    @Heading(value = "@ColorField(values, autogenerateColors = GenerateColorsState.SHADES)", level = 4)
    String shadesHeading;

    @DialogField
    @ColorField(
        value = DEFAULT_COLOR,
        emptyText = "Choose color",
        autogenerateColors = GenerateColorsState.SHADES
    )
    @ValueMapValue
    private String autogeneratedShadesForAKColorFiled;

    @Heading(value = "@ColorField(values, autogenerateColors = GenerateColorsState.TINTS)", level = 4)
    String tintsHeading;

    @DialogField
    @ColorField(
        value = DEFAULT_COLOR,
        emptyText = "Choose color",
        autogenerateColors = GenerateColorsState.TINTS

    )
    @ValueMapValue
    private String autogeneratedTintsForAKColorFiled;
    public String getDefaultAKColorFiled() {
        return defaultAKColorFiled;
    }
    public String getDefaultSlingColorFiled() {
        return defaultSlingColorFiled;
    }
    public String getColorVariantSWATCH() {
        return colorVariantSWATCH;
    }
    public String getAutogeneratedShadesForAKColorFiled() {
        return autogeneratedShadesForAKColorFiled;
    }
    public String getAutogeneratedTintsForAKColorFiled() {
        return autogeneratedTintsForAKColorFiled;
    }
}
