package com.exadel.aem.toolkit.samples.models;

import com.exadel.aem.toolkit.api.annotations.main.AemComponent;
import com.exadel.aem.toolkit.api.annotations.main.Dialog;
import com.exadel.aem.toolkit.api.annotations.widgets.DialogField;
import com.exadel.aem.toolkit.api.annotations.widgets.Heading;
import com.exadel.aem.toolkit.api.annotations.widgets.textarea.TextArea;
import com.exadel.aem.toolkit.samples.constants.GroupConstants;
import com.exadel.aem.toolkit.samples.constants.PathConstants;

import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;

@AemComponent(
    path = "content/text-area-component",
    title = "Text Area Component",
    description = "This component shows possibilities of interaction with text areas",
    resourceSuperType = PathConstants.FOUNDATION_PARBASE_PATH,
    componentGroup = GroupConstants.COMPONENT_GROUP
)
@Dialog(extraClientlibs = "authoring-toolkit.samples.authoring")
@Model(adaptables = SlingHttpServletRequest.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
public class TextAreaComponent {
    @Heading(value = "Here you can fill existing area with text or add some additional areas", level = 3)
    private String heading;
    @DialogField(
        name = "defaultTextArea",
        description = "Text area with default quantity of columns(1) and rows(5)"
    )
    @TextArea(emptyText = "Default text area",value = "Default text that was generated by @TextArea annotation")
    @ValueMapValue
    private String defaultTextArea;

    @DialogField(
        name = "rowsLimitTextArea",
        description = "Text area with limitation to 2 rows"
    )
    @TextArea(emptyText = "Default text area", rows = 2)
    @ValueMapValue
    private String rowsLimitTextArea;

//    @DialogField(
//        name = "columnsLimitTextArea",
//        description = "Text area with limitation to 3 columns"
//    )
//    @TextArea(emptyText = "Default text area", cols = 2)
//    @ValueMapValue
//    private String columnsLimitTextArea;

    public String getDefaultTextArea() {
        return defaultTextArea;
    }
//    public String getColumnsLimitTextArea() {
//        return columnsLimitTextArea;
//    }
    public String getRowsLimitTextArea() {
        return rowsLimitTextArea;
    }
}

